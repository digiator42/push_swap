#include "push_swap.h"
//pa chatgpt

// void push(t_list **head, int value) {
//     t_list *newNode =  malloc(sizeof(t_list));
//     newNode->value = value;
//     newNode->next = *head;
//     *head = newNode;
// }

// void pop(t_list **head) {
//     if (*head == NULL) {
//         return;
//     }
//     t_list *temp = *head;
//     *head = (*head)->next;
//     free(temp);
// }

// void pb_move(t_list **head_a, t_list **head_b) {
//     if(*head_a == NULL){
//         return;
//     }
//     int value = (*head_a)->value;
//     pop(head_a);
//     push(head_b,value);
// }

// int main()
// {
// 	int i = 0;
// 	t_list *lst;
// 	t_list *tmp;
// 	t_list *tmp2;
// 	int c[] = {1, 2, 3, 4};
// 	lst = ft_lstnew(c[i++]);
// 	while (i < 4)
// 		ft_lstadd_back(&lst, ft_lstnew(c[i++]));
// 	i = 0;	
// 	t_list *lst2;
// 	int c2[] = {5, 6, 7, 8};
// 	lst2 = ft_lstnew(c2[i++]);
// 	while (i < 4)
// 		ft_lstadd_back(&lst2, ft_lstnew(c2[i++]));

// 	print_stack(lst);
// 	print_stack(lst2);
// 	pb_move(&lst, &lst2);
// 	print_stack(lst);
// 	print_stack(lst2);
// }


// void push(t_list **head, int value) {
//     t_list *newNode = (t_list*) malloc(sizeof(t_list));
//     newNode->value = value;
//     newNode->next = *head;
//     *head = newNode;
//       printf("pb\n");

// }

// void rotate(t_list **head) {
//      if(*head == NULL || (*head)->next == NULL) {
//         return;
//     }
//     t_list *temp = *head;
//     while(temp->next->next != NULL)
//         temp = temp->next;
//     temp->next->next = *head;
//     *head = temp->next;
//     temp->next = NULL;
//     printf("ra\n");
// }

// void swap(t_list **head) {
//     t_list *temp = (*head)->next;
//     (*head)->next = temp->next;
//     temp->next = *head;
//     *head = temp;
//     printf("sa\n");
// }
//  int	ft_lstsize(t_list *lst)
// {
// 	int	len;

// 	len = 0;
// 	while (lst)
// 	{
// 		lst = lst->next;
// 		len++;
// 	}
// 	return (len);
// }


// void push_swap(t_list *stack_a, t_list *stack_b) {
//     // printf("stack a : ");
//     // print_stack(stack_a);
//     // printf("stack b : ");
//     // print_stack(stack_b);
//     int i = 1;
//     while(!is_sorted(stack_a))// && !is_sorted(stack_a)) //stack overflow :D
//     {    
//         // usleep(500000);
//         if(stack_a && stack_a->next != NULL){
//             push(&stack_b, stack_a->value);
//             stack_a = stack_a->next;
//         }
//         else if(stack_a->next == NULL){
//                 push(&stack_b, stack_a->value);
//                 stack_a->next = NULL;
//                 break;
//         }
//         else{
//             printf("I am else now");
//             if(stack_a->next != NULL && stack_a->value > stack_a->next->value)
//                     swap(&stack_a);
//             if(stack_a->next != NULL && stack_a->value < stack_a->next->value) {
//                 push(&stack_b, stack_a->value);
//                 stack_a = stack_a->next;
//             }
//             else
//                 rotate(&stack_a);
//         }
//         printf("loop %d\n", i++);
//         printf("stack a : ");
//         print_stack(stack_a);
//         printf("stack b : ");
//         print_stack(stack_b);
//     }
//     if(is_sorted(stack_b)){
//         printf("stack a is :: ");
//         print_stack(stack_a);
//         printf("stack b is :: ");
//         print_stack(stack_b);
//         exit(0);
//     }
//     if(stack_a->next == NULL){
//         t_list *nu = NULL;
//         printf("its : ");
//             print_stack(stack_a);
//             free(stack_a);
//             stack_a = nu;
//             free(stack_a);
//                 printf("bbbb :");
//             print_stack(stack_b);
//             printf("I am end now");
//             // if(ft_lstsize(stack_a) == 1){
//             //     push(&stack_b, stack_a->value);
//             //     printf("hi");
//             // }
//             print_stack(stack_a);
//             printf("\n");
//             print_stack(stack_b);
//             exit(0);
//     }
//     // printf("stack b : ");
//     print_stack(stack_b);
// }  



// int main()
// {
// 	int i = 0;
// 	t_list *lst;
// 	int c[] = {37,28,59,26,88,63,30,10,101,55,17,45,73,61,22,71,24,4,47,15,67,87,5,89,46,27,56,91,34,9,76,98,96,42,32,29,79,53,81,43,33,20,78,80,93,7,72,51,25,69,100,68,39,60,50,65,92,90,84,18,49,75,95,11,44,97,62,48,6,3,82,40,16,57,21,41,99,12,94,35,58,85,2,64,83,19,70,13,66,54,14,23,86,74,38,77,36,31,52,8};
// 	lst = ft_lstnew(c[i++]);
// 	while (i < (sizeof(c) / sizeof(c[i])))
// 		ft_lstadd_back(&lst, ft_lstnew(c[i++]));
// 	// i = 0;	
// 	t_list *lst2 = NULL;
// 	// int c2[] = {4, 1, 3, 2};
// 	// lst2 = ft_lstnew(c2[i++]);
// 	// while (i < 4)
// 	// 	ft_lstadd_back(&lst2, ft_lstnew(c2[i++]));

// 	// print_stack(lst);
// 	// print_stack(lst2);
// 	push_swap(lst, lst2);
// 	// print_stack(lst);
// 	// print_stack(lst2);
// }









//sorting 4 nums

	// if((*stack_a)->index == 0)
	// {
	// 	push_stk(stack_b, stack_a, 2);
	// 	sort_three(stack_a);
	// 	push_stk(stack_a, stack_b, 1);
	// }
	// else if((*stack_a)->next->index == 0)
	// {
	// 	swap_stk(stack_a, 1);
	// 	push_stk(stack_b, stack_a, 2);
	// 	sort_three(stack_a);
	// 	push_stk(stack_a, stack_b, 1);
	// }
	// else
	// {
	// 	if()
	// }